{"version":3,"sources":["src/paddle.js","src/input.js","src/collisionDetection.js","src/ball.js","src/heart.js","src/brick.js","src/levels.js","src/game.js","src/index.js"],"names":["Paddle","game","size","w","h","width","height","gameHeight","gameWidth","position","x","y","speed","maxSpeed","inLoop","ctx","fillStyle","fillRect","deltaTime","InputHandler","paddle","document","addEventListener","event","key","start","moveLeft","moveRight","togglePause","ctrlKey","altKey","restart","stop","detectCollision","ball","gameObject","ballTop","ballBottom","ballLeft","ballRight","gameObjectTop","gameObjectBottom","gameObjectLeft","gameObjectRight","condition","Ball","image","getElementById","reset","drawImage","lives","Heart","initial","i","level","Number","font","textAlign","fillText","Brick","markedForDeletion","buildLevel","pracBrick","bricks","forEach","row","rowIndex","brick","brickIndex","push","level1","level2","level3","levels","GAME_STATE","PAUSED","RUNNING","MENU","GAME_OVER","NEW_LEVEL","VICTORY","Game","gameState","gameObjects","heart","length","elem","update","isInLoop","filter","draw","rect","fill","canvas","getContext","GAME_WIDTH","clientWidth","GAME_HEIGHT","clientHeight","lastTime","gameLoop","timeStamp","clearRect","requestAnimationFrame"],"mappings":"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","file":"src.8c565985.js","sourceRoot":"..","sourcesContent":["export default class Paddle {\r\n  constructor(game) {\r\n    this.size = { w: 150, h: 30 };\r\n    this.width = this.size.w;\r\n    this.height = this.size.h;\r\n    this.gameHeight = game.gameHeight;\r\n    this.gameWidth = game.gameWidth;\r\n\r\n    this.position = {\r\n      x: this.gameWidth / 2 - this.width / 2,\r\n      y: this.gameHeight - this.height - 10\r\n    };\r\n\r\n    this.speed = 0;\r\n    this.maxSpeed = 7;\r\n\r\n    this.inLoop = true;\r\n  }\r\n\r\n  stop() {\r\n    this.inLoop = false;\r\n  }\r\n\r\n  start() {\r\n    this.inLoop = true;\r\n  }\r\n\r\n  moveRight() {\r\n    this.speed = this.maxSpeed;\r\n  }\r\n\r\n  moveLeft() {\r\n    this.speed = -this.maxSpeed;\r\n  }\r\n\r\n  draw(ctx) {\r\n    ctx.fillStyle = \"#fff\";\r\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\r\n  }\r\n\r\n  update(deltaTime) {\r\n    if (!deltaTime) return;\r\n\r\n    if (this.inLoop) {\r\n      this.position.x += this.speed;\r\n      if (this.position.x < 10) this.position.x = 10;\r\n      if (this.position.x > this.gameWidth - this.width - 10)\r\n        this.position.x = this.gameWidth - this.width - 10;\r\n    }\r\n  }\r\n}\r\n","export default class InputHandler {\r\n  constructor(paddle, game) {\r\n    document.addEventListener(\"keydown\", (event) => {\r\n      switch (event.key) {\r\n        case \"ArrowLeft\":\r\n          paddle.start();\r\n          paddle.moveLeft();\r\n          break;\r\n\r\n        case \"ArrowRight\":\r\n          paddle.start();\r\n          paddle.moveRight();\r\n          break;\r\n\r\n        case \"Escape\":\r\n          game.togglePause();\r\n          break;\r\n\r\n        case \" \":\r\n          game.start();\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n\r\n      if (event.ctrlKey && event.altKey && event.key === \"r\") {\r\n        game.restart();\r\n      }\r\n    });\r\n\r\n    document.addEventListener(\"keyup\", (event) => {\r\n      switch (event.key) {\r\n        case \"ArrowLeft\":\r\n          paddle.stop();\r\n          break;\r\n\r\n        case \"ArrowRight\":\r\n          paddle.stop();\r\n          break;\r\n\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n}\r\n","export default function detectCollision(ball, gameObject) {\r\n  let ballTop = ball.position.y;\r\n  let ballBottom = ball.position.y + ball.size;\r\n  let ballLeft = ball.position.x;\r\n  let ballRight = ballLeft + ball.size;\r\n\r\n  let gameObjectTop = gameObject.position.y;\r\n  let gameObjectBottom = gameObjectTop + gameObject.size.h;\r\n  let gameObjectLeft = gameObject.position.x;\r\n  let gameObjectRight = gameObjectLeft + gameObject.size.w;\r\n\r\n  const condition1 = ballBottom >= gameObjectTop && ballTop <= gameObjectBottom;\r\n\r\n  const condition2 = ballLeft >= gameObjectLeft && ballRight <= gameObjectRight;\r\n  const condition = condition1 && condition2;\r\n  if (condition) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n","import detectCollision from \"./collisionDetection\";\r\n\r\nexport default class Ball {\r\n  constructor(game) {\r\n    this.image = document.getElementById(\"imgBall\");\r\n    this.position = { x: 100, y: 250 };\r\n    this.speed = { x: 5, y: -5 };\r\n    this.size = 16;\r\n    this.game = game;\r\n\r\n    this.gameWidth = game.gameWidth;\r\n    this.gameHeight = game.gameHeight;\r\n    this.reset();\r\n  }\r\n\r\n  reset() {\r\n    this.position = { x: 100, y: 250 };\r\n    this.speed = { x: 5, y: -5 };\r\n  }\r\n\r\n  draw(ctx) {\r\n    ctx.drawImage(\r\n      this.image,\r\n      this.position.x,\r\n      this.position.y,\r\n      this.size,\r\n      this.size\r\n    );\r\n  }\r\n\r\n  update(deltaTime) {\r\n    this.position.x += this.speed.x;\r\n    this.position.y += this.speed.y;\r\n\r\n    // wall on left or right\r\n    if (this.position.x > this.gameWidth - this.size || this.position.x < 0) {\r\n      this.speed.x = -this.speed.x;\r\n    }\r\n\r\n    // wall on top\r\n    if (this.position.y < 0) {\r\n      this.speed.y = -this.speed.y;\r\n    }\r\n\r\n    // wall on bottom\r\n    if (this.position.y > this.gameHeight - this.size) {\r\n      this.game.lives--;\r\n      this.reset();\r\n    }\r\n\r\n    // collision with paddle\r\n    if (detectCollision(this, this.game.paddle)) {\r\n      this.speed.y = -this.speed.y;\r\n      this.position.y = this.game.paddle.position.y - this.size;\r\n    }\r\n  }\r\n}\r\n","export default class Heart {\r\n  constructor(game) {\r\n    this.image = document.getElementById(\"imgHeart\");\r\n    this.game = game;\r\n    this.gameWidth = game.gameWidth;\r\n    this.gameHeight = game.gameHeight;\r\n    this.size = 15;\r\n    this.initial = {\r\n      x: this.gameWidth - 30,\r\n      y: 30\r\n    };\r\n  }\r\n\r\n  update(deltaTime) {\r\n    return true;\r\n  }\r\n\r\n  draw(ctx) {\r\n    const lives = this.game.lives;\r\n    for (var i = 0; i < lives; i++) {\r\n      let x = this.initial.x - (i * this.size + 4);\r\n      ctx.drawImage(this.image, x, this.initial.y, this.size, this.size);\r\n    }\r\n\r\n    const level = \"Level: \" + Number(this.game.level) + 1;\r\n    ctx.font = \"14px Roboto\";\r\n    ctx.textAlign = \"center\";\r\n    ctx.fillStyle = \"#fff\";\r\n    ctx.fillText(level, 30, 30);\r\n  }\r\n}\r\n","import detectCollision from \"./collisionDetection\";\r\n\r\nexport default class Brick {\r\n  constructor(game, position) {\r\n    this.image = document.getElementById(\"imgBrick\");\r\n\r\n    this.game = game;\r\n    this.position = position;\r\n    this.size = { w: this.game.gameWidth / 10, h: this.game.gameWidth / 25 };\r\n    this.markedForDeletion = false;\r\n  }\r\n\r\n  update() {\r\n    if (detectCollision(this.game.ball, this)) {\r\n      this.game.ball.speed.y = -this.game.ball.speed.y;\r\n      this.markedForDeletion = true;\r\n    }\r\n  }\r\n\r\n  draw(ctx) {\r\n    ctx.drawImage(\r\n      this.image,\r\n      this.position.x,\r\n      this.position.y,\r\n      this.size.w,\r\n      this.size.h\r\n    );\r\n  }\r\n}\r\n","import Brick from \"./brick\";\r\n\r\nfunction buildLevel(game, level) {\r\n  const pracBrick = new Brick(game, { x: 0, y: 0 });\r\n  const { w, h } = pracBrick.size;\r\n  let bricks = [];\r\n  level.forEach((row, rowIndex) => {\r\n    row.forEach((brick, brickIndex) => {\r\n      if (brick === 1) {\r\n        let position = {\r\n          x: w * brickIndex,\r\n          y: h * rowIndex + 75\r\n        };\r\n\r\n        bricks.push(new Brick(game, position));\r\n      }\r\n    });\r\n  });\r\n\r\n  return bricks;\r\n}\r\n\r\nconst level1 = [\r\n  [0, 1, 1, 0, 1, 1, 0, 1, 0, 1],\r\n  [1, 1, 1, 0, 1, 0, 1, 1, 1, 1],\r\n  [1, 0, 1, 1, 0, 1, 1, 1, 1, 0],\r\n  [1, 1, 1, 1, 1, 0, 1, 1, 1, 0]\r\n];\r\n\r\nconst level2 = [\r\n  [0, 1, 1, 1, 1, 1, 1, 0, 1, 0],\r\n  [1, 1, 1, 1, 0, 1, 1, 1, 1, 0],\r\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n  [0, 1, 1, 1, 0, 0, 1, 0, 0, 0]\r\n];\r\n\r\nconst level3 = [\r\n  [0, 0, 1, 0, 0, 1, 0, 1, 1, 0],\r\n  [1, 1, 1, 1, 0, 1, 0, 1, 1, 1],\r\n  [1, 1, 1, 1, 1, 0, 1, 1, 1, 0],\r\n  [0, 0, 0, 0, 0, 0, 1, 1, 0, 0],\r\n  [1, 1, 1, 1, 0, 1, 0, 0, 1, 0]\r\n];\r\n\r\nconst levels = [level1, level2, level3];\r\n\r\nexport { levels, buildLevel };\r\n","import Paddle from \"./paddle\";\r\nimport InputHandler from \"./input\";\r\nimport Ball from \"./ball\";\r\nimport Heart from \"./heart\";\r\nimport { buildLevel, levels } from \"./levels\";\r\n\r\nconst GAME_STATE = {\r\n  PAUSED: 0,\r\n  RUNNING: 1,\r\n  MENU: 2,\r\n  GAME_OVER: 3,\r\n  NEW_LEVEL: 4,\r\n  VICTORY: 5\r\n};\r\n\r\nexport default class Game {\r\n  constructor(game) {\r\n    this.gameWidth = game.gameWidth;\r\n    this.gameHeight = game.gameHeight;\r\n    this.gameState = GAME_STATE.MENU;\r\n\r\n    this.gameObjects = [];\r\n    this.bricks = [];\r\n\r\n    this.paddle = new Paddle(this);\r\n    this.ball = new Ball(this);\r\n    this.heart = new Heart(this);\r\n    this.lives = 3;\r\n    this.levels = levels;\r\n    this.level = 0;\r\n    new InputHandler(this.paddle, this);\r\n  }\r\n\r\n  start() {\r\n    if (\r\n      this.gameState === GAME_STATE.MENU ||\r\n      this.gameState === GAME_STATE.NEW_LEVEL\r\n    ) {\r\n      if (this.levels[this.level]) {\r\n        this.bricks = buildLevel(this, this.levels[this.level]);\r\n        this.gameObjects = [this.paddle, this.ball];\r\n        this.ball.reset();\r\n        this.gameState = GAME_STATE.RUNNING;\r\n      } else {\r\n        this.gameState = GAME_STATE.VICTORY;\r\n      }\r\n    }\r\n  }\r\n\r\n  restart() {\r\n    this.gameObjects = [];\r\n    this.bricks = [];\r\n    this.lives = 3;\r\n    this.level = 0;\r\n    this.bricks = buildLevel(this, this.levels[this.level]);\r\n    this.gameObjects = [this.paddle, this.ball];\r\n    this.ball.reset();\r\n    this.gameState = GAME_STATE.RUNNING;\r\n  }\r\n\r\n  togglePause() {\r\n    if (this.gameState === GAME_STATE.RUNNING) {\r\n      this.gameState = GAME_STATE.PAUSED;\r\n    } else {\r\n      this.gameState = GAME_STATE.RUNNING;\r\n    }\r\n  }\r\n\r\n  update(deltaTime) {\r\n    if (this.lives === 0) {\r\n      this.gameState = GAME_STATE.GAME_OVER;\r\n    }\r\n\r\n    if (this.gameState === GAME_STATE.RUNNING && this.bricks.length === 0) {\r\n      this.level++;\r\n      this.gameState = GAME_STATE.NEW_LEVEL;\r\n      this.start();\r\n    }\r\n\r\n    if (this.gameState === GAME_STATE.RUNNING) {\r\n      [...this.gameObjects, ...this.bricks].forEach((elem) =>\r\n        elem.update(deltaTime)\r\n      );\r\n      this.isInLoop = true;\r\n\r\n      this.bricks = this.bricks.filter((brick) => !brick.markedForDeletion);\r\n    }\r\n  }\r\n\r\n  draw(ctx) {\r\n    if (\r\n      this.gameState === GAME_STATE.RUNNING ||\r\n      this.gameState === GAME_STATE.PAUSED\r\n    ) {\r\n      [...this.gameObjects, ...this.bricks, this.heart].forEach((elem) =>\r\n        elem.draw(ctx)\r\n      );\r\n    }\r\n\r\n    if (this.gameState === GAME_STATE.PAUSED) {\r\n      ctx.rect(0, 0, this.gameWidth, this.gameHeight);\r\n      ctx.fillStyle = \"rgba(225, 225, 225, 0.5)\";\r\n      ctx.fill();\r\n\r\n      ctx.font = \"30px Roboto\";\r\n      ctx.fillStyle = \"#0ff\";\r\n      ctx.textAlign = \"center\";\r\n      ctx.fillText(\"PAUSED\", this.gameWidth / 2, this.gameHeight / 2);\r\n    }\r\n    if (this.gameState === GAME_STATE.MENU) {\r\n      ctx.rect(10, 10, this.gameWidth - 20, this.gameHeight - 20);\r\n      ctx.fillStyle = \"#fff\";\r\n      ctx.fill();\r\n\r\n      ctx.font = \"30px Roboto\";\r\n      ctx.fillStyle = \"#0ff\";\r\n      ctx.textAlign = \"center\";\r\n      ctx.fillText(\r\n        \"Press SPACEBAR to start.\",\r\n        this.gameWidth / 2,\r\n        this.gameHeight / 2\r\n      );\r\n    }\r\n    if (this.gameState === GAME_STATE.GAME_OVER) {\r\n      ctx.rect(10, 10, this.gameWidth - 20, this.gameHeight - 20);\r\n      ctx.fillStyle = \"#f00\";\r\n      ctx.fill();\r\n\r\n      ctx.font = \"30px Roboto\";\r\n      ctx.fillStyle = \"#0ff\";\r\n      ctx.textAlign = \"center\";\r\n      ctx.fillText(\r\n        \"GAME OVER. Press Ctrl + Alt + R to restart\",\r\n        this.gameWidth / 2,\r\n        this.gameHeight / 2\r\n      );\r\n    }\r\n    if (this.gameState === GAME_STATE.VICTORY) {\r\n      ctx.rect(10, 10, this.gameWidth - 20, this.gameHeight - 20);\r\n      ctx.fillStyle = \"#0ff\";\r\n      ctx.fill();\r\n\r\n      ctx.font = \"30px Roboto\";\r\n      ctx.fillStyle = \"#fff\";\r\n      ctx.textAlign = \"center\";\r\n      ctx.fillText(\r\n        \"VICTORY! Press Ctrl + Alt + R to restart\",\r\n        this.gameWidth / 2,\r\n        this.gameHeight / 2\r\n      );\r\n    }\r\n  }\r\n}\r\n","import Game from \"./game\";\n\nconst canvas = document.getElementById(\"gameScreen\");\nconst ctx = canvas.getContext(\"2d\");\n\nconst GAME_WIDTH = canvas.clientWidth;\nconst GAME_HEIGHT = canvas.clientHeight;\n\n// Assets and Functions\n\nlet game = new Game({ gameWidth: GAME_WIDTH, gameHeight: GAME_HEIGHT });\n\n// State / Variables\n\nlet lastTime = 0;\n\nfunction gameLoop(timeStamp) {\n  let deltaTime = timeStamp - lastTime;\n  lastTime = timeStamp;\n\n  ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n  game.update(deltaTime);\n  game.draw(ctx);\n\n  requestAnimationFrame(gameLoop);\n}\n\nrequestAnimationFrame(gameLoop);\n"]}